#!/usr/bin/env bash

# Regular Colors
#\[\033[0;30m\] # Black
#\[\033[0;31m\] # Red
#\[\033[0;32m\] # Green $(tput setaf 2)
#\[\033[0;33m\] # Yellow
#\[\033[0;34m\] # Blue
#\[\033[0;35m\] # Purple
#\[\033[0;36m\] # Cyan
#\[\033[0;37m\] # White
#
## High Intensty
#\[\033[0;90m\] # Black
#\[\033[0;91m\] # Red
#\[\033[0;92m\] # Green
#\[\033[0;93m\] # Yellow
#\[\033[0;94m\] # Blue
#\[\033[0;95m\] # Purple
#\[\033[0;96m\] # Cyan
#\[\033[0;97m\] # White

## Background
#\[\033[40m\] # Black
#\[\033[41m\] # Red
#\[\033[42m\] # Green
#\[\033[43m\] # Yellow
#\[\033[44m\] # Blue
#\[\033[45m\] # Purple
#\[\033[46m\] # Cyan
#\[\033[47m\] # White
#
## High Intensty backgrounds
#\[\033[0;100m\] # Black
#\[\033[0;101m\] # Red
#\[\033[0;102m\] # Green
#\[\033[0;103m\] # Yellow
#\[\033[0;104m\] # Blue
#\[\033[10;95m\] # Purple
#\[\033[0;106m\] # Cyan
#\[\033[0;107m\] # White

#\[\033[0m\] # End Color (tput sgr0)

#Replace any leading leading 0; with 1; for bold colors
#Replace any leading 0; with 4; to underline

# Bash Prompt Escape Sequences
#   \a     an ASCII bell character (07)
#   \d     the date in "Weekday Month Date" format (e.g., "Tue May 26")
#   \e     an ASCII escape character (033)
#   \h     the hostname up to the first '.'
#   \H     the hostname
#   \j     the number of jobs currently managed by the shell
#   \l     the basename of the shell's terminal device name
#   \n     newline
#   \r     carriage return
#   \s     the  name  of  the shell, the basename of $0
#          (the portion following the final slash)
#   \t     the current time in 24-hour HH:MM:SS format
#   \T     the current time in 12-hour HH:MM:SS format
#   \@     the current time in 12-hour am/pm format
#   \u     the username of the current user
#   \v     the version of bash (e.g., 2.00)
#   \V     the release of bash,  version  +  patchlevel
#          (e.g., 2.00.0)
#   \w     the current working directory
#   \W     the  basename  of the current working direc­
#          tory
#   \!     the history number of this command
#   \#     the command number of this command
#   \$     if the effective UID is 0, a #, otherwise  a
#          $
#   \nnn   the  character  corresponding  to  the octal
#          number nnn
#   \\     a backslash
#   \[     begin a sequence of non-printing characters,
#          which could be used to embed a terminal con­
#          trol sequence into the prompt
#   \]     end a sequence of non-printing characters

prompt_command() {
    local BOLD_BLACK="\[\033[1;30m\]"
    local BOLD_RED="\[\033[1;31m\]"
    local BOLD_GREEN="\[\033[1;32m\]"
    local BOLD_YELLOW="\[\033[1;33m\]"
    local BOLD_BLUE="\[\033[1;34m\]"
    local BOLD_PURPLE="\[\033[1;35m\]"
    local CYAN="\[\033[0;36m\]"
    local BOLD_CYAN="\[\033[1;36m\]"
    local BOLD_WHITE="\[\033[1;37m\]"
    local RESET="\[\033[0m\]"

    export PS1="\$(exitstatus)\$(runningjobs) ${BOLD_CYAN}[\D{%Y%m%d} \t]${RESET} ${CYAN}\u@\h${RESET}:${BOLD_BLUE}\w${RESET}\$(parse_git_branch)\$(vpnstatus)\$(caffeinatestatus) \n\! \$ "
}

exitstatus() {
    local EXITCODE="$?"
    local GREEN="\033[0;32m"
    local BOLD_RED="\033[1;31m"
    local RESET="\033[0m"

    if [ ${EXITCODE} -eq 0 ]; then
        echo -ne "(${GREEN}${EXITCODE}${RESET})"
    else
        echo -ne "(${BOLD_RED}${EXITCODE}${RESET})"
    fi
}

# get current branch in git repo
parse_git_branch() {
    local RED="\033[0;31m"
    local RESET="\033[0m"
	local BRANCH=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
	if [ ! "${BRANCH}" == "" ];	then
		STATE=$(parse_git_dirty)
		echo -ne " [${BRANCH}${RED}${STATE}${RESET}]"
	else
		echo ""
	fi
}

# get current status of git repo
parse_git_dirty() {
    local GIT_STATUS="$(git status 2>&1 | tee)"
	local DIRTY=$(echo -ne "${GIT_STATUS}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?")
	local UNTRACKED=$(echo -ne "${GIT_STATUS}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?")
	local AHEAD=$(echo -ne "${GIT_STATUS}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?")
	local NEWFILE=$(echo -ne "${GIT_STATUS}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?")
	local RENAMED=$(echo -ne "${GIT_STATUS}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?")
    local DELETED=$(echo -ne "${GIT_STATUS}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?")
	local BITS=''
	if [ "${RENAMED}" == "0" ]; then
		BITS=">${BITS}"
	fi
	if [ "${AHEAD}" == "0" ]; then
		BITS="*${BITS}"
	fi
	if [ "${NEWFILE}" == "0" ]; then
		BITS="+${BITS}"
	fi
	if [ "${UNTRACKED}" == "0" ]; then
		BITS="?${BITS}"
	fi
	if [ "${DELETED}" == "0" ]; then
		BITS="x${BITS}"
	fi
	if [ "${DIRTY}" == "0" ]; then
		BITS="!${BITS}"
	fi
	if [ ! "${BITS}" == "" ]; then
		echo " ${BITS}"
	else
		echo ""
	fi
}

vpnstatus() {
    local BOLD_YELLOW="\033[1;33m"
    local RESET="\033[0m"
    if [[ -f ${HOME}/.openconnect/pid ]]; then
        echo -ne " ${BOLD_YELLOW}(vpn)${RESET}"
    else
        echo ""
    fi
 }

caffeinatestatus() {
    if [[ $(pgrep caffeinate | wc -l) -ne 0 ]]; then
        echo -ne " ☕️"
    else
        echo ""
    fi
}

runningjobs() {
    local PURPLE="\033[0;35m"
    local RESET="\033[0m"
    local NUM_JOBS=$(jobs | wc -l | sed 's/[^0-9]*//g')
    if [[ ${NUM_JOBS} -eq 0 ]]; then
        echo ""
    else
        echo -ne " ${PURPLE}[${NUM_JOBS}]${RESET}"
    fi
}
export PROMPT_COMMAND=prompt_command
export PS2="\! => "
